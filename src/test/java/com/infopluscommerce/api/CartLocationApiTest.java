/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.CartLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CartLocationApi
 */
@Ignore
public class CartLocationApiTest {

    private final CartLocationApi api = new CartLocationApi();

    
    /**
     * Add new audit for a cartLocation
     *
     * Adds an audit to an existing cartLocation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCartLocationAuditTest() throws ApiException {
        Integer cartLocationId = null;
        String cartLocationAudit = null;
        api.addCartLocationAudit(cartLocationId, cartLocationAudit);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a cartLocation.
     *
     * Adds a tag to an existing cartLocation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCartLocationTagTest() throws ApiException {
        Integer cartLocationId = null;
        String cartLocationTag = null;
        api.addCartLocationTag(cartLocationId, cartLocationTag);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a cartLocation.
     *
     * Deletes an existing cartLocation tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCartLocationTagTest() throws ApiException {
        Integer cartLocationId = null;
        String cartLocationTag = null;
        api.deleteCartLocationTag(cartLocationId, cartLocationTag);

        // TODO: test validations
    }
    
    /**
     * Search cartLocations by filter
     *
     * Returns the list of cartLocations that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartLocationByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<CartLocation> response = api.getCartLocationByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a cartLocation by id
     *
     * Returns the cartLocation identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartLocationByIdTest() throws ApiException {
        Integer cartLocationId = null;
        CartLocation response = api.getCartLocationById(cartLocationId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a cartLocation.
     *
     * Get all existing cartLocation tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartLocationTagsTest() throws ApiException {
        Integer cartLocationId = null;
        api.getCartLocationTags(cartLocationId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a cartLocation by id
     *
     * Returns a duplicated cartLocation identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateCartLocationByIdTest() throws ApiException {
        Integer cartLocationId = null;
        CartLocation response = api.getDuplicateCartLocationById(cartLocationId);

        // TODO: test validations
    }
    
}
