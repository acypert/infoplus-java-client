/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Cart;
import com.infopluscommerce.model.ModelApiResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CartApi
 */
@Ignore
public class CartApiTest {

    private final CartApi api = new CartApi();

    
    /**
     * Create a cart
     *
     * Inserts a new cart using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCartTest() throws ApiException {
        Cart body = null;
        Cart response = api.addCart(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a cart
     *
     * Adds an audit to an existing cart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCartAuditTest() throws ApiException {
        Integer cartId = null;
        String cartAudit = null;
        api.addCartAudit(cartId, cartAudit);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a cart.
     *
     * Adds a tag to an existing cart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCartTagTest() throws ApiException {
        Integer cartId = null;
        String cartTag = null;
        api.addCartTag(cartId, cartTag);

        // TODO: test validations
    }
    
    /**
     * Delete a cart
     *
     * Deletes the cart identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCartTest() throws ApiException {
        Integer cartId = null;
        api.deleteCart(cartId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a cart.
     *
     * Deletes an existing cart tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCartTagTest() throws ApiException {
        Integer cartId = null;
        String cartTag = null;
        api.deleteCartTag(cartId, cartTag);

        // TODO: test validations
    }
    
    /**
     * Search carts by filter
     *
     * Returns the list of carts that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Cart> response = api.getCartByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a cart by id
     *
     * Returns the cart identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartByIdTest() throws ApiException {
        Integer cartId = null;
        Cart response = api.getCartById(cartId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a cart.
     *
     * Get all existing cart tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCartTagsTest() throws ApiException {
        Integer cartId = null;
        api.getCartTags(cartId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a cart by id
     *
     * Returns a duplicated cart identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateCartByIdTest() throws ApiException {
        Integer cartId = null;
        Cart response = api.getDuplicateCartById(cartId);

        // TODO: test validations
    }
    
    /**
     * Update a cart
     *
     * Updates an existing cart using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCartTest() throws ApiException {
        Cart body = null;
        api.updateCart(body);

        // TODO: test validations
    }
    
}
