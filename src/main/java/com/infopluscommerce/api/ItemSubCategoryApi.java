/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemSubCategory;
import com.infopluscommerce.model.ModelApiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemSubCategoryApi {
    private ApiClient apiClient;

    public ItemSubCategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemSubCategoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemSubCategory
     * @param body ItemSubCategory to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryCall(ItemSubCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSubCategoryValidateBeforeCall(ItemSubCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemSubCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSubCategoryCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemSubCategory
     * Inserts a new itemSubCategory using the specified data.
     * @param body ItemSubCategory to be inserted. (required)
     * @return ItemSubCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSubCategory addItemSubCategory(ItemSubCategory body) throws ApiException {
        ApiResponse<ItemSubCategory> resp = addItemSubCategoryWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemSubCategory
     * Inserts a new itemSubCategory using the specified data.
     * @param body ItemSubCategory to be inserted. (required)
     * @return ApiResponse&lt;ItemSubCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSubCategory> addItemSubCategoryWithHttpInfo(ItemSubCategory body) throws ApiException {
        com.squareup.okhttp.Call call = addItemSubCategoryValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemSubCategory (asynchronously)
     * Inserts a new itemSubCategory using the specified data.
     * @param body ItemSubCategory to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryAsync(ItemSubCategory body, final ApiCallback<ItemSubCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSubCategoryValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemSubCategoryAudit
     * @param itemSubCategoryId Id of the itemSubCategory to add an audit to (required)
     * @param itemSubCategoryAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryAuditCall(Integer itemSubCategoryId, String itemSubCategoryAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}/audit/{itemSubCategoryAudit}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()))
            .replaceAll("\\{" + "itemSubCategoryAudit" + "\\}", apiClient.escapeString(itemSubCategoryAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSubCategoryAuditValidateBeforeCall(Integer itemSubCategoryId, String itemSubCategoryAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling addItemSubCategoryAudit(Async)");
        }
        
        // verify the required parameter 'itemSubCategoryAudit' is set
        if (itemSubCategoryAudit == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryAudit' when calling addItemSubCategoryAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSubCategoryAuditCall(itemSubCategoryId, itemSubCategoryAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemSubCategory
     * Adds an audit to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add an audit to (required)
     * @param itemSubCategoryAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSubCategoryAudit(Integer itemSubCategoryId, String itemSubCategoryAudit) throws ApiException {
        addItemSubCategoryAuditWithHttpInfo(itemSubCategoryId, itemSubCategoryAudit);
    }

    /**
     * Add new audit for an itemSubCategory
     * Adds an audit to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add an audit to (required)
     * @param itemSubCategoryAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSubCategoryAuditWithHttpInfo(Integer itemSubCategoryId, String itemSubCategoryAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemSubCategoryAuditValidateBeforeCall(itemSubCategoryId, itemSubCategoryAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemSubCategory (asynchronously)
     * Adds an audit to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add an audit to (required)
     * @param itemSubCategoryAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryAuditAsync(Integer itemSubCategoryId, String itemSubCategoryAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSubCategoryAuditValidateBeforeCall(itemSubCategoryId, itemSubCategoryAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSubCategoryTag
     * @param itemSubCategoryId Id of the itemSubCategory to add a tag to (required)
     * @param itemSubCategoryTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryTagCall(Integer itemSubCategoryId, String itemSubCategoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()))
            .replaceAll("\\{" + "itemSubCategoryTag" + "\\}", apiClient.escapeString(itemSubCategoryTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSubCategoryTagValidateBeforeCall(Integer itemSubCategoryId, String itemSubCategoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling addItemSubCategoryTag(Async)");
        }
        
        // verify the required parameter 'itemSubCategoryTag' is set
        if (itemSubCategoryTag == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryTag' when calling addItemSubCategoryTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSubCategoryTagCall(itemSubCategoryId, itemSubCategoryTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemSubCategory.
     * Adds a tag to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add a tag to (required)
     * @param itemSubCategoryTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSubCategoryTag(Integer itemSubCategoryId, String itemSubCategoryTag) throws ApiException {
        addItemSubCategoryTagWithHttpInfo(itemSubCategoryId, itemSubCategoryTag);
    }

    /**
     * Add new tags for an itemSubCategory.
     * Adds a tag to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add a tag to (required)
     * @param itemSubCategoryTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSubCategoryTagWithHttpInfo(Integer itemSubCategoryId, String itemSubCategoryTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemSubCategoryTagValidateBeforeCall(itemSubCategoryId, itemSubCategoryTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemSubCategory. (asynchronously)
     * Adds a tag to an existing itemSubCategory.
     * @param itemSubCategoryId Id of the itemSubCategory to add a tag to (required)
     * @param itemSubCategoryTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSubCategoryTagAsync(Integer itemSubCategoryId, String itemSubCategoryTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSubCategoryTagValidateBeforeCall(itemSubCategoryId, itemSubCategoryTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSubCategory
     * @param itemSubCategoryId Id of the itemSubCategory to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSubCategoryCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSubCategoryValidateBeforeCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling deleteItemSubCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSubCategoryCall(itemSubCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemSubCategory
     * Deletes the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSubCategory(Integer itemSubCategoryId) throws ApiException {
        deleteItemSubCategoryWithHttpInfo(itemSubCategoryId);
    }

    /**
     * Delete an itemSubCategory
     * Deletes the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSubCategoryWithHttpInfo(Integer itemSubCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSubCategoryValidateBeforeCall(itemSubCategoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemSubCategory (asynchronously)
     * Deletes the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSubCategoryAsync(Integer itemSubCategoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSubCategoryValidateBeforeCall(itemSubCategoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSubCategoryTag
     * @param itemSubCategoryId Id of the itemSubCategory to remove tag from (required)
     * @param itemSubCategoryTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSubCategoryTagCall(Integer itemSubCategoryId, String itemSubCategoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()))
            .replaceAll("\\{" + "itemSubCategoryTag" + "\\}", apiClient.escapeString(itemSubCategoryTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSubCategoryTagValidateBeforeCall(Integer itemSubCategoryId, String itemSubCategoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling deleteItemSubCategoryTag(Async)");
        }
        
        // verify the required parameter 'itemSubCategoryTag' is set
        if (itemSubCategoryTag == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryTag' when calling deleteItemSubCategoryTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSubCategoryTagCall(itemSubCategoryId, itemSubCategoryTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemSubCategory.
     * Deletes an existing itemSubCategory tag using the specified data.
     * @param itemSubCategoryId Id of the itemSubCategory to remove tag from (required)
     * @param itemSubCategoryTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSubCategoryTag(Integer itemSubCategoryId, String itemSubCategoryTag) throws ApiException {
        deleteItemSubCategoryTagWithHttpInfo(itemSubCategoryId, itemSubCategoryTag);
    }

    /**
     * Delete a tag for an itemSubCategory.
     * Deletes an existing itemSubCategory tag using the specified data.
     * @param itemSubCategoryId Id of the itemSubCategory to remove tag from (required)
     * @param itemSubCategoryTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSubCategoryTagWithHttpInfo(Integer itemSubCategoryId, String itemSubCategoryTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSubCategoryTagValidateBeforeCall(itemSubCategoryId, itemSubCategoryTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemSubCategory. (asynchronously)
     * Deletes an existing itemSubCategory tag using the specified data.
     * @param itemSubCategoryId Id of the itemSubCategory to remove tag from (required)
     * @param itemSubCategoryTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSubCategoryTagAsync(Integer itemSubCategoryId, String itemSubCategoryTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSubCategoryTagValidateBeforeCall(itemSubCategoryId, itemSubCategoryTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemSubCategoryById
     * @param itemSubCategoryId Id of the itemSubCategory to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSubCategoryByIdCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/duplicate/{itemSubCategoryId}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemSubCategoryByIdValidateBeforeCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling getDuplicateItemSubCategoryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemSubCategoryByIdCall(itemSubCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemSubCategory by id
     * Returns a duplicated itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be duplicated. (required)
     * @return ItemSubCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSubCategory getDuplicateItemSubCategoryById(Integer itemSubCategoryId) throws ApiException {
        ApiResponse<ItemSubCategory> resp = getDuplicateItemSubCategoryByIdWithHttpInfo(itemSubCategoryId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemSubCategory by id
     * Returns a duplicated itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be duplicated. (required)
     * @return ApiResponse&lt;ItemSubCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSubCategory> getDuplicateItemSubCategoryByIdWithHttpInfo(Integer itemSubCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemSubCategoryByIdValidateBeforeCall(itemSubCategoryId, null, null);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemSubCategory by id (asynchronously)
     * Returns a duplicated itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSubCategoryByIdAsync(Integer itemSubCategoryId, final ApiCallback<ItemSubCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemSubCategoryByIdValidateBeforeCall(itemSubCategoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSubCategoryByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSubCategoryByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemSubCategoryByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemSubCategorys by filter
     * Returns the list of itemSubCategorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemSubCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemSubCategory> getItemSubCategoryByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemSubCategory>> resp = getItemSubCategoryByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemSubCategorys by filter
     * Returns the list of itemSubCategorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemSubCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemSubCategory>> getItemSubCategoryByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemSubCategoryByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemSubCategory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemSubCategorys by filter (asynchronously)
     * Returns the list of itemSubCategorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemSubCategory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSubCategoryByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemSubCategory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSubCategoryById
     * @param itemSubCategoryId Id of the itemSubCategory to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryByIdCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSubCategoryByIdValidateBeforeCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling getItemSubCategoryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSubCategoryByIdCall(itemSubCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemSubCategory by id
     * Returns the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be returned. (required)
     * @return ItemSubCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSubCategory getItemSubCategoryById(Integer itemSubCategoryId) throws ApiException {
        ApiResponse<ItemSubCategory> resp = getItemSubCategoryByIdWithHttpInfo(itemSubCategoryId);
        return resp.getData();
    }

    /**
     * Get an itemSubCategory by id
     * Returns the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be returned. (required)
     * @return ApiResponse&lt;ItemSubCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSubCategory> getItemSubCategoryByIdWithHttpInfo(Integer itemSubCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSubCategoryByIdValidateBeforeCall(itemSubCategoryId, null, null);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemSubCategory by id (asynchronously)
     * Returns the itemSubCategory identified by the specified id.
     * @param itemSubCategoryId Id of the itemSubCategory to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryByIdAsync(Integer itemSubCategoryId, final ApiCallback<ItemSubCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSubCategoryByIdValidateBeforeCall(itemSubCategoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSubCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSubCategoryTags
     * @param itemSubCategoryId Id of the itemSubCategory to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryTagsCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory/{itemSubCategoryId}/tag"
            .replaceAll("\\{" + "itemSubCategoryId" + "\\}", apiClient.escapeString(itemSubCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSubCategoryTagsValidateBeforeCall(Integer itemSubCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSubCategoryId' is set
        if (itemSubCategoryId == null) {
            throw new ApiException("Missing the required parameter 'itemSubCategoryId' when calling getItemSubCategoryTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSubCategoryTagsCall(itemSubCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemSubCategory.
     * Get all existing itemSubCategory tags.
     * @param itemSubCategoryId Id of the itemSubCategory to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSubCategoryTags(Integer itemSubCategoryId) throws ApiException {
        getItemSubCategoryTagsWithHttpInfo(itemSubCategoryId);
    }

    /**
     * Get the tags for an itemSubCategory.
     * Get all existing itemSubCategory tags.
     * @param itemSubCategoryId Id of the itemSubCategory to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSubCategoryTagsWithHttpInfo(Integer itemSubCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSubCategoryTagsValidateBeforeCall(itemSubCategoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemSubCategory. (asynchronously)
     * Get all existing itemSubCategory tags.
     * @param itemSubCategoryId Id of the itemSubCategory to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSubCategoryTagsAsync(Integer itemSubCategoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSubCategoryTagsValidateBeforeCall(itemSubCategoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemSubCategory
     * @param body ItemSubCategory to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemSubCategoryCall(ItemSubCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSubCategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemSubCategoryValidateBeforeCall(ItemSubCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemSubCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemSubCategoryCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemSubCategory
     * Updates an existing itemSubCategory using the specified data.
     * @param body ItemSubCategory to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemSubCategory(ItemSubCategory body) throws ApiException {
        updateItemSubCategoryWithHttpInfo(body);
    }

    /**
     * Update an itemSubCategory
     * Updates an existing itemSubCategory using the specified data.
     * @param body ItemSubCategory to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemSubCategoryWithHttpInfo(ItemSubCategory body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemSubCategoryValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemSubCategory (asynchronously)
     * Updates an existing itemSubCategory using the specified data.
     * @param body ItemSubCategory to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemSubCategoryAsync(ItemSubCategory body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemSubCategoryValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
