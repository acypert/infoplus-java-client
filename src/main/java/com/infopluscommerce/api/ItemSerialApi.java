/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemSerial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemSerialApi {
    private ApiClient apiClient;

    public ItemSerialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemSerialApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemSerialAudit
     * @param itemSerialId Id of the itemSerial to add an audit to (required)
     * @param itemSerialAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialAuditCall(Integer itemSerialId, String itemSerialAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}/audit/{itemSerialAudit}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()))
            .replaceAll("\\{" + "itemSerialAudit" + "\\}", apiClient.escapeString(itemSerialAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialAuditValidateBeforeCall(Integer itemSerialId, String itemSerialAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling addItemSerialAudit(Async)");
        }
        
        // verify the required parameter 'itemSerialAudit' is set
        if (itemSerialAudit == null) {
            throw new ApiException("Missing the required parameter 'itemSerialAudit' when calling addItemSerialAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialAuditCall(itemSerialId, itemSerialAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemSerial
     * Adds an audit to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add an audit to (required)
     * @param itemSerialAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialAudit(Integer itemSerialId, String itemSerialAudit) throws ApiException {
        addItemSerialAuditWithHttpInfo(itemSerialId, itemSerialAudit);
    }

    /**
     * Add new audit for an itemSerial
     * Adds an audit to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add an audit to (required)
     * @param itemSerialAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialAuditWithHttpInfo(Integer itemSerialId, String itemSerialAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialAuditValidateBeforeCall(itemSerialId, itemSerialAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemSerial (asynchronously)
     * Adds an audit to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add an audit to (required)
     * @param itemSerialAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialAuditAsync(Integer itemSerialId, String itemSerialAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialAuditValidateBeforeCall(itemSerialId, itemSerialAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSerialTag
     * @param itemSerialId Id of the itemSerial to add a tag to (required)
     * @param itemSerialTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialTagCall(Integer itemSerialId, String itemSerialTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()))
            .replaceAll("\\{" + "itemSerialTag" + "\\}", apiClient.escapeString(itemSerialTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialTagValidateBeforeCall(Integer itemSerialId, String itemSerialTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling addItemSerialTag(Async)");
        }
        
        // verify the required parameter 'itemSerialTag' is set
        if (itemSerialTag == null) {
            throw new ApiException("Missing the required parameter 'itemSerialTag' when calling addItemSerialTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialTagCall(itemSerialId, itemSerialTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemSerial.
     * Adds a tag to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add a tag to (required)
     * @param itemSerialTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialTag(Integer itemSerialId, String itemSerialTag) throws ApiException {
        addItemSerialTagWithHttpInfo(itemSerialId, itemSerialTag);
    }

    /**
     * Add new tags for an itemSerial.
     * Adds a tag to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add a tag to (required)
     * @param itemSerialTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialTagWithHttpInfo(Integer itemSerialId, String itemSerialTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialTagValidateBeforeCall(itemSerialId, itemSerialTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemSerial. (asynchronously)
     * Adds a tag to an existing itemSerial.
     * @param itemSerialId Id of the itemSerial to add a tag to (required)
     * @param itemSerialTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialTagAsync(Integer itemSerialId, String itemSerialTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialTagValidateBeforeCall(itemSerialId, itemSerialTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSerial
     * @param itemSerialId Id of the itemSerial to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSerialValidateBeforeCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling deleteItemSerial(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSerialCall(itemSerialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemSerial
     * Deletes the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSerial(Integer itemSerialId) throws ApiException {
        deleteItemSerialWithHttpInfo(itemSerialId);
    }

    /**
     * Delete an itemSerial
     * Deletes the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSerialWithHttpInfo(Integer itemSerialId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSerialValidateBeforeCall(itemSerialId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemSerial (asynchronously)
     * Deletes the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialAsync(Integer itemSerialId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSerialValidateBeforeCall(itemSerialId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSerialTag
     * @param itemSerialId Id of the itemSerial to remove tag from (required)
     * @param itemSerialTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialTagCall(Integer itemSerialId, String itemSerialTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()))
            .replaceAll("\\{" + "itemSerialTag" + "\\}", apiClient.escapeString(itemSerialTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSerialTagValidateBeforeCall(Integer itemSerialId, String itemSerialTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling deleteItemSerialTag(Async)");
        }
        
        // verify the required parameter 'itemSerialTag' is set
        if (itemSerialTag == null) {
            throw new ApiException("Missing the required parameter 'itemSerialTag' when calling deleteItemSerialTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSerialTagCall(itemSerialId, itemSerialTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemSerial.
     * Deletes an existing itemSerial tag using the specified data.
     * @param itemSerialId Id of the itemSerial to remove tag from (required)
     * @param itemSerialTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSerialTag(Integer itemSerialId, String itemSerialTag) throws ApiException {
        deleteItemSerialTagWithHttpInfo(itemSerialId, itemSerialTag);
    }

    /**
     * Delete a tag for an itemSerial.
     * Deletes an existing itemSerial tag using the specified data.
     * @param itemSerialId Id of the itemSerial to remove tag from (required)
     * @param itemSerialTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSerialTagWithHttpInfo(Integer itemSerialId, String itemSerialTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSerialTagValidateBeforeCall(itemSerialId, itemSerialTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemSerial. (asynchronously)
     * Deletes an existing itemSerial tag using the specified data.
     * @param itemSerialId Id of the itemSerial to remove tag from (required)
     * @param itemSerialTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialTagAsync(Integer itemSerialId, String itemSerialTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSerialTagValidateBeforeCall(itemSerialId, itemSerialTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemSerialById
     * @param itemSerialId Id of the itemSerial to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSerialByIdCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/duplicate/{itemSerialId}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemSerialByIdValidateBeforeCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling getDuplicateItemSerialById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemSerialByIdCall(itemSerialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemSerial by id
     * Returns a duplicated itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be duplicated. (required)
     * @return ItemSerial
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSerial getDuplicateItemSerialById(Integer itemSerialId) throws ApiException {
        ApiResponse<ItemSerial> resp = getDuplicateItemSerialByIdWithHttpInfo(itemSerialId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemSerial by id
     * Returns a duplicated itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be duplicated. (required)
     * @return ApiResponse&lt;ItemSerial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSerial> getDuplicateItemSerialByIdWithHttpInfo(Integer itemSerialId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemSerialByIdValidateBeforeCall(itemSerialId, null, null);
        Type localVarReturnType = new TypeToken<ItemSerial>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemSerial by id (asynchronously)
     * Returns a duplicated itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSerialByIdAsync(Integer itemSerialId, final ApiCallback<ItemSerial> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemSerialByIdValidateBeforeCall(itemSerialId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSerial>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemSerialByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemSerials by filter
     * Returns the list of itemSerials that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemSerial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemSerial> getItemSerialByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemSerial>> resp = getItemSerialByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemSerials by filter
     * Returns the list of itemSerials that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemSerial&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemSerial>> getItemSerialByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemSerial>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemSerials by filter (asynchronously)
     * Returns the list of itemSerials that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemSerial>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemSerial>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialById
     * @param itemSerialId Id of the itemSerial to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialByIdCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialByIdValidateBeforeCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling getItemSerialById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSerialByIdCall(itemSerialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemSerial by id
     * Returns the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be returned. (required)
     * @return ItemSerial
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSerial getItemSerialById(Integer itemSerialId) throws ApiException {
        ApiResponse<ItemSerial> resp = getItemSerialByIdWithHttpInfo(itemSerialId);
        return resp.getData();
    }

    /**
     * Get an itemSerial by id
     * Returns the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be returned. (required)
     * @return ApiResponse&lt;ItemSerial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSerial> getItemSerialByIdWithHttpInfo(Integer itemSerialId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialByIdValidateBeforeCall(itemSerialId, null, null);
        Type localVarReturnType = new TypeToken<ItemSerial>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemSerial by id (asynchronously)
     * Returns the itemSerial identified by the specified id.
     * @param itemSerialId Id of the itemSerial to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialByIdAsync(Integer itemSerialId, final ApiCallback<ItemSerial> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialByIdValidateBeforeCall(itemSerialId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSerial>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialTags
     * @param itemSerialId Id of the itemSerial to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialTagsCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerial/{itemSerialId}/tag"
            .replaceAll("\\{" + "itemSerialId" + "\\}", apiClient.escapeString(itemSerialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialTagsValidateBeforeCall(Integer itemSerialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialId' is set
        if (itemSerialId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialId' when calling getItemSerialTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSerialTagsCall(itemSerialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemSerial.
     * Get all existing itemSerial tags.
     * @param itemSerialId Id of the itemSerial to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSerialTags(Integer itemSerialId) throws ApiException {
        getItemSerialTagsWithHttpInfo(itemSerialId);
    }

    /**
     * Get the tags for an itemSerial.
     * Get all existing itemSerial tags.
     * @param itemSerialId Id of the itemSerial to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSerialTagsWithHttpInfo(Integer itemSerialId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialTagsValidateBeforeCall(itemSerialId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemSerial. (asynchronously)
     * Get all existing itemSerial tags.
     * @param itemSerialId Id of the itemSerial to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialTagsAsync(Integer itemSerialId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialTagsValidateBeforeCall(itemSerialId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
