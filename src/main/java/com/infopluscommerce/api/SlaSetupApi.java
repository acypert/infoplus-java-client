/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.SlaSetup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlaSetupApi {
    private ApiClient apiClient;

    public SlaSetupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SlaSetupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addSlaSetupAudit
     * @param slaSetupId Id of the slaSetup to add an audit to (required)
     * @param slaSetupAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupAuditCall(Integer slaSetupId, String slaSetupAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}/audit/{slaSetupAudit}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()))
            .replaceAll("\\{" + "slaSetupAudit" + "\\}", apiClient.escapeString(slaSetupAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSlaSetupAuditValidateBeforeCall(Integer slaSetupId, String slaSetupAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling addSlaSetupAudit(Async)");
        }
        
        // verify the required parameter 'slaSetupAudit' is set
        if (slaSetupAudit == null) {
            throw new ApiException("Missing the required parameter 'slaSetupAudit' when calling addSlaSetupAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addSlaSetupAuditCall(slaSetupId, slaSetupAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a slaSetup
     * Adds an audit to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add an audit to (required)
     * @param slaSetupAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSlaSetupAudit(Integer slaSetupId, String slaSetupAudit) throws ApiException {
        addSlaSetupAuditWithHttpInfo(slaSetupId, slaSetupAudit);
    }

    /**
     * Add new audit for a slaSetup
     * Adds an audit to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add an audit to (required)
     * @param slaSetupAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSlaSetupAuditWithHttpInfo(Integer slaSetupId, String slaSetupAudit) throws ApiException {
        com.squareup.okhttp.Call call = addSlaSetupAuditValidateBeforeCall(slaSetupId, slaSetupAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a slaSetup (asynchronously)
     * Adds an audit to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add an audit to (required)
     * @param slaSetupAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupAuditAsync(Integer slaSetupId, String slaSetupAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSlaSetupAuditValidateBeforeCall(slaSetupId, slaSetupAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addSlaSetupFile
     * @param slaSetupId Id of the slaSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupFileCall(Integer slaSetupId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}/file/{fileName}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSlaSetupFileValidateBeforeCall(Integer slaSetupId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling addSlaSetupFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addSlaSetupFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addSlaSetupFileCall(slaSetupId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a slaSetup
     * Adds a file to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSlaSetupFile(Integer slaSetupId, String fileName) throws ApiException {
        addSlaSetupFileWithHttpInfo(slaSetupId, fileName);
    }

    /**
     * Attach a file to a slaSetup
     * Adds a file to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSlaSetupFileWithHttpInfo(Integer slaSetupId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addSlaSetupFileValidateBeforeCall(slaSetupId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a slaSetup (asynchronously)
     * Adds a file to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupFileAsync(Integer slaSetupId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSlaSetupFileValidateBeforeCall(slaSetupId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addSlaSetupTag
     * @param slaSetupId Id of the slaSetup to add a tag to (required)
     * @param slaSetupTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupTagCall(Integer slaSetupId, String slaSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()))
            .replaceAll("\\{" + "slaSetupTag" + "\\}", apiClient.escapeString(slaSetupTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSlaSetupTagValidateBeforeCall(Integer slaSetupId, String slaSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling addSlaSetupTag(Async)");
        }
        
        // verify the required parameter 'slaSetupTag' is set
        if (slaSetupTag == null) {
            throw new ApiException("Missing the required parameter 'slaSetupTag' when calling addSlaSetupTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addSlaSetupTagCall(slaSetupId, slaSetupTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a slaSetup.
     * Adds a tag to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a tag to (required)
     * @param slaSetupTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSlaSetupTag(Integer slaSetupId, String slaSetupTag) throws ApiException {
        addSlaSetupTagWithHttpInfo(slaSetupId, slaSetupTag);
    }

    /**
     * Add new tags for a slaSetup.
     * Adds a tag to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a tag to (required)
     * @param slaSetupTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSlaSetupTagWithHttpInfo(Integer slaSetupId, String slaSetupTag) throws ApiException {
        com.squareup.okhttp.Call call = addSlaSetupTagValidateBeforeCall(slaSetupId, slaSetupTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a slaSetup. (asynchronously)
     * Adds a tag to an existing slaSetup.
     * @param slaSetupId Id of the slaSetup to add a tag to (required)
     * @param slaSetupTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSlaSetupTagAsync(Integer slaSetupId, String slaSetupTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSlaSetupTagValidateBeforeCall(slaSetupId, slaSetupTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSlaSetupTag
     * @param slaSetupId Id of the slaSetup to remove tag from (required)
     * @param slaSetupTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlaSetupTagCall(Integer slaSetupId, String slaSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()))
            .replaceAll("\\{" + "slaSetupTag" + "\\}", apiClient.escapeString(slaSetupTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSlaSetupTagValidateBeforeCall(Integer slaSetupId, String slaSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling deleteSlaSetupTag(Async)");
        }
        
        // verify the required parameter 'slaSetupTag' is set
        if (slaSetupTag == null) {
            throw new ApiException("Missing the required parameter 'slaSetupTag' when calling deleteSlaSetupTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSlaSetupTagCall(slaSetupId, slaSetupTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a slaSetup.
     * Deletes an existing slaSetup tag using the specified data.
     * @param slaSetupId Id of the slaSetup to remove tag from (required)
     * @param slaSetupTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSlaSetupTag(Integer slaSetupId, String slaSetupTag) throws ApiException {
        deleteSlaSetupTagWithHttpInfo(slaSetupId, slaSetupTag);
    }

    /**
     * Delete a tag for a slaSetup.
     * Deletes an existing slaSetup tag using the specified data.
     * @param slaSetupId Id of the slaSetup to remove tag from (required)
     * @param slaSetupTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSlaSetupTagWithHttpInfo(Integer slaSetupId, String slaSetupTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlaSetupTagValidateBeforeCall(slaSetupId, slaSetupTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a slaSetup. (asynchronously)
     * Deletes an existing slaSetup tag using the specified data.
     * @param slaSetupId Id of the slaSetup to remove tag from (required)
     * @param slaSetupTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlaSetupTagAsync(Integer slaSetupId, String slaSetupTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlaSetupTagValidateBeforeCall(slaSetupId, slaSetupTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateSlaSetupById
     * @param slaSetupId Id of the slaSetup to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateSlaSetupByIdCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/duplicate/{slaSetupId}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateSlaSetupByIdValidateBeforeCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling getDuplicateSlaSetupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateSlaSetupByIdCall(slaSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a slaSetup by id
     * Returns a duplicated slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be duplicated. (required)
     * @return SlaSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlaSetup getDuplicateSlaSetupById(Integer slaSetupId) throws ApiException {
        ApiResponse<SlaSetup> resp = getDuplicateSlaSetupByIdWithHttpInfo(slaSetupId);
        return resp.getData();
    }

    /**
     * Get a duplicated a slaSetup by id
     * Returns a duplicated slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be duplicated. (required)
     * @return ApiResponse&lt;SlaSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlaSetup> getDuplicateSlaSetupByIdWithHttpInfo(Integer slaSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateSlaSetupByIdValidateBeforeCall(slaSetupId, null, null);
        Type localVarReturnType = new TypeToken<SlaSetup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a slaSetup by id (asynchronously)
     * Returns a duplicated slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateSlaSetupByIdAsync(Integer slaSetupId, final ApiCallback<SlaSetup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateSlaSetupByIdValidateBeforeCall(slaSetupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SlaSetup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSlaSetupByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlaSetupByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSlaSetupByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search slaSetups by filter
     * Returns the list of slaSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;SlaSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SlaSetup> getSlaSetupByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<SlaSetup>> resp = getSlaSetupByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search slaSetups by filter
     * Returns the list of slaSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;SlaSetup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SlaSetup>> getSlaSetupByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getSlaSetupByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<SlaSetup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search slaSetups by filter (asynchronously)
     * Returns the list of slaSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<SlaSetup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlaSetupByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SlaSetup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSlaSetupById
     * @param slaSetupId Id of the slaSetup to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupByIdCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlaSetupByIdValidateBeforeCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling getSlaSetupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getSlaSetupByIdCall(slaSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a slaSetup by id
     * Returns the slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be returned. (required)
     * @return SlaSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlaSetup getSlaSetupById(Integer slaSetupId) throws ApiException {
        ApiResponse<SlaSetup> resp = getSlaSetupByIdWithHttpInfo(slaSetupId);
        return resp.getData();
    }

    /**
     * Get a slaSetup by id
     * Returns the slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be returned. (required)
     * @return ApiResponse&lt;SlaSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlaSetup> getSlaSetupByIdWithHttpInfo(Integer slaSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getSlaSetupByIdValidateBeforeCall(slaSetupId, null, null);
        Type localVarReturnType = new TypeToken<SlaSetup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a slaSetup by id (asynchronously)
     * Returns the slaSetup identified by the specified id.
     * @param slaSetupId Id of the slaSetup to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupByIdAsync(Integer slaSetupId, final ApiCallback<SlaSetup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlaSetupByIdValidateBeforeCall(slaSetupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SlaSetup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSlaSetupTags
     * @param slaSetupId Id of the slaSetup to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupTagsCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/slaSetup/{slaSetupId}/tag"
            .replaceAll("\\{" + "slaSetupId" + "\\}", apiClient.escapeString(slaSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlaSetupTagsValidateBeforeCall(Integer slaSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slaSetupId' is set
        if (slaSetupId == null) {
            throw new ApiException("Missing the required parameter 'slaSetupId' when calling getSlaSetupTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getSlaSetupTagsCall(slaSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a slaSetup.
     * Get all existing slaSetup tags.
     * @param slaSetupId Id of the slaSetup to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getSlaSetupTags(Integer slaSetupId) throws ApiException {
        getSlaSetupTagsWithHttpInfo(slaSetupId);
    }

    /**
     * Get the tags for a slaSetup.
     * Get all existing slaSetup tags.
     * @param slaSetupId Id of the slaSetup to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getSlaSetupTagsWithHttpInfo(Integer slaSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getSlaSetupTagsValidateBeforeCall(slaSetupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a slaSetup. (asynchronously)
     * Get all existing slaSetup tags.
     * @param slaSetupId Id of the slaSetup to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlaSetupTagsAsync(Integer slaSetupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlaSetupTagsValidateBeforeCall(slaSetupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
