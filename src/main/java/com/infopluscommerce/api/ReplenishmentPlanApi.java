/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ReplenishmentPlan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplenishmentPlanApi {
    private ApiClient apiClient;

    public ReplenishmentPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplenishmentPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReplenishmentPlan
     * @param body ReplenishmentPlan to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentPlanValidateBeforeCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReplenishmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentPlanCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a replenishmentPlan
     * Inserts a new replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be inserted. (required)
     * @return ReplenishmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplenishmentPlan addReplenishmentPlan(ReplenishmentPlan body) throws ApiException {
        ApiResponse<ReplenishmentPlan> resp = addReplenishmentPlanWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a replenishmentPlan
     * Inserts a new replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be inserted. (required)
     * @return ApiResponse&lt;ReplenishmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplenishmentPlan> addReplenishmentPlanWithHttpInfo(ReplenishmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentPlanValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a replenishmentPlan (asynchronously)
     * Inserts a new replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanAsync(ReplenishmentPlan body, final ApiCallback<ReplenishmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentPlanAudit
     * @param replenishmentPlanId Id of the replenishmentPlan to add an audit to (required)
     * @param replenishmentPlanAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanAuditCall(Integer replenishmentPlanId, String replenishmentPlanAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/audit/{replenishmentPlanAudit}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()))
            .replaceAll("\\{" + "replenishmentPlanAudit" + "\\}", apiClient.escapeString(replenishmentPlanAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentPlanAuditValidateBeforeCall(Integer replenishmentPlanId, String replenishmentPlanAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling addReplenishmentPlanAudit(Async)");
        }
        
        // verify the required parameter 'replenishmentPlanAudit' is set
        if (replenishmentPlanAudit == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanAudit' when calling addReplenishmentPlanAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentPlanAuditCall(replenishmentPlanId, replenishmentPlanAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a replenishmentPlan
     * Adds an audit to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add an audit to (required)
     * @param replenishmentPlanAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentPlanAudit(Integer replenishmentPlanId, String replenishmentPlanAudit) throws ApiException {
        addReplenishmentPlanAuditWithHttpInfo(replenishmentPlanId, replenishmentPlanAudit);
    }

    /**
     * Add new audit for a replenishmentPlan
     * Adds an audit to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add an audit to (required)
     * @param replenishmentPlanAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentPlanAuditWithHttpInfo(Integer replenishmentPlanId, String replenishmentPlanAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentPlanAuditValidateBeforeCall(replenishmentPlanId, replenishmentPlanAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a replenishmentPlan (asynchronously)
     * Adds an audit to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add an audit to (required)
     * @param replenishmentPlanAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanAuditAsync(Integer replenishmentPlanId, String replenishmentPlanAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentPlanAuditValidateBeforeCall(replenishmentPlanId, replenishmentPlanAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentPlanTag
     * @param replenishmentPlanId Id of the replenishmentPlan to add a tag to (required)
     * @param replenishmentPlanTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanTagCall(Integer replenishmentPlanId, String replenishmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()))
            .replaceAll("\\{" + "replenishmentPlanTag" + "\\}", apiClient.escapeString(replenishmentPlanTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentPlanTagValidateBeforeCall(Integer replenishmentPlanId, String replenishmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling addReplenishmentPlanTag(Async)");
        }
        
        // verify the required parameter 'replenishmentPlanTag' is set
        if (replenishmentPlanTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanTag' when calling addReplenishmentPlanTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentPlanTagCall(replenishmentPlanId, replenishmentPlanTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a replenishmentPlan.
     * Adds a tag to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add a tag to (required)
     * @param replenishmentPlanTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentPlanTag(Integer replenishmentPlanId, String replenishmentPlanTag) throws ApiException {
        addReplenishmentPlanTagWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);
    }

    /**
     * Add new tags for a replenishmentPlan.
     * Adds a tag to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add a tag to (required)
     * @param replenishmentPlanTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentPlanTagWithHttpInfo(Integer replenishmentPlanId, String replenishmentPlanTag) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentPlanTagValidateBeforeCall(replenishmentPlanId, replenishmentPlanTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a replenishmentPlan. (asynchronously)
     * Adds a tag to an existing replenishmentPlan.
     * @param replenishmentPlanId Id of the replenishmentPlan to add a tag to (required)
     * @param replenishmentPlanTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentPlanTagAsync(Integer replenishmentPlanId, String replenishmentPlanTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentPlanTagValidateBeforeCall(replenishmentPlanId, replenishmentPlanTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentPlan
     * @param replenishmentPlanId Id of the replenishmentPlan to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentPlanCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentPlanValidateBeforeCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling deleteReplenishmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentPlanCall(replenishmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a replenishmentPlan
     * Deletes the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentPlan(Integer replenishmentPlanId) throws ApiException {
        deleteReplenishmentPlanWithHttpInfo(replenishmentPlanId);
    }

    /**
     * Delete a replenishmentPlan
     * Deletes the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentPlanWithHttpInfo(Integer replenishmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentPlanValidateBeforeCall(replenishmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a replenishmentPlan (asynchronously)
     * Deletes the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentPlanAsync(Integer replenishmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentPlanValidateBeforeCall(replenishmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentPlanTag
     * @param replenishmentPlanId Id of the replenishmentPlan to remove tag from (required)
     * @param replenishmentPlanTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentPlanTagCall(Integer replenishmentPlanId, String replenishmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()))
            .replaceAll("\\{" + "replenishmentPlanTag" + "\\}", apiClient.escapeString(replenishmentPlanTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentPlanTagValidateBeforeCall(Integer replenishmentPlanId, String replenishmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling deleteReplenishmentPlanTag(Async)");
        }
        
        // verify the required parameter 'replenishmentPlanTag' is set
        if (replenishmentPlanTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanTag' when calling deleteReplenishmentPlanTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentPlanTagCall(replenishmentPlanId, replenishmentPlanTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a replenishmentPlan.
     * Deletes an existing replenishmentPlan tag using the specified data.
     * @param replenishmentPlanId Id of the replenishmentPlan to remove tag from (required)
     * @param replenishmentPlanTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentPlanTag(Integer replenishmentPlanId, String replenishmentPlanTag) throws ApiException {
        deleteReplenishmentPlanTagWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);
    }

    /**
     * Delete a tag for a replenishmentPlan.
     * Deletes an existing replenishmentPlan tag using the specified data.
     * @param replenishmentPlanId Id of the replenishmentPlan to remove tag from (required)
     * @param replenishmentPlanTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentPlanTagWithHttpInfo(Integer replenishmentPlanId, String replenishmentPlanTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentPlanTagValidateBeforeCall(replenishmentPlanId, replenishmentPlanTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a replenishmentPlan. (asynchronously)
     * Deletes an existing replenishmentPlan tag using the specified data.
     * @param replenishmentPlanId Id of the replenishmentPlan to remove tag from (required)
     * @param replenishmentPlanTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentPlanTagAsync(Integer replenishmentPlanId, String replenishmentPlanTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentPlanTagValidateBeforeCall(replenishmentPlanId, replenishmentPlanTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReplenishmentPlanById
     * @param replenishmentPlanId Id of the replenishmentPlan to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentPlanByIdCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/duplicate/{replenishmentPlanId}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReplenishmentPlanByIdValidateBeforeCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling getDuplicateReplenishmentPlanById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReplenishmentPlanByIdCall(replenishmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a replenishmentPlan by id
     * Returns a duplicated replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be duplicated. (required)
     * @return ReplenishmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplenishmentPlan getDuplicateReplenishmentPlanById(Integer replenishmentPlanId) throws ApiException {
        ApiResponse<ReplenishmentPlan> resp = getDuplicateReplenishmentPlanByIdWithHttpInfo(replenishmentPlanId);
        return resp.getData();
    }

    /**
     * Get a duplicated a replenishmentPlan by id
     * Returns a duplicated replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be duplicated. (required)
     * @return ApiResponse&lt;ReplenishmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplenishmentPlan> getDuplicateReplenishmentPlanByIdWithHttpInfo(Integer replenishmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReplenishmentPlanByIdValidateBeforeCall(replenishmentPlanId, null, null);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a replenishmentPlan by id (asynchronously)
     * Returns a duplicated replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentPlanByIdAsync(Integer replenishmentPlanId, final ApiCallback<ReplenishmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReplenishmentPlanByIdValidateBeforeCall(replenishmentPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentPlanByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentPlanByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReplenishmentPlanByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search replenishmentPlans by filter
     * Returns the list of replenishmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ReplenishmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReplenishmentPlan> getReplenishmentPlanByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ReplenishmentPlan>> resp = getReplenishmentPlanByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search replenishmentPlans by filter
     * Returns the list of replenishmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ReplenishmentPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReplenishmentPlan>> getReplenishmentPlanByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentPlanByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ReplenishmentPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search replenishmentPlans by filter (asynchronously)
     * Returns the list of replenishmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ReplenishmentPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentPlanByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReplenishmentPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentPlanById
     * @param replenishmentPlanId Id of the replenishmentPlan to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanByIdCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentPlanByIdValidateBeforeCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling getReplenishmentPlanById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentPlanByIdCall(replenishmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a replenishmentPlan by id
     * Returns the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be returned. (required)
     * @return ReplenishmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplenishmentPlan getReplenishmentPlanById(Integer replenishmentPlanId) throws ApiException {
        ApiResponse<ReplenishmentPlan> resp = getReplenishmentPlanByIdWithHttpInfo(replenishmentPlanId);
        return resp.getData();
    }

    /**
     * Get a replenishmentPlan by id
     * Returns the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be returned. (required)
     * @return ApiResponse&lt;ReplenishmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplenishmentPlan> getReplenishmentPlanByIdWithHttpInfo(Integer replenishmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentPlanByIdValidateBeforeCall(replenishmentPlanId, null, null);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a replenishmentPlan by id (asynchronously)
     * Returns the replenishmentPlan identified by the specified id.
     * @param replenishmentPlanId Id of the replenishmentPlan to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanByIdAsync(Integer replenishmentPlanId, final ApiCallback<ReplenishmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentPlanByIdValidateBeforeCall(replenishmentPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplenishmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentPlanTags
     * @param replenishmentPlanId Id of the replenishmentPlan to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanTagsCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag"
            .replaceAll("\\{" + "replenishmentPlanId" + "\\}", apiClient.escapeString(replenishmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentPlanTagsValidateBeforeCall(Integer replenishmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentPlanId' is set
        if (replenishmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentPlanId' when calling getReplenishmentPlanTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentPlanTagsCall(replenishmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a replenishmentPlan.
     * Get all existing replenishmentPlan tags.
     * @param replenishmentPlanId Id of the replenishmentPlan to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReplenishmentPlanTags(Integer replenishmentPlanId) throws ApiException {
        getReplenishmentPlanTagsWithHttpInfo(replenishmentPlanId);
    }

    /**
     * Get the tags for a replenishmentPlan.
     * Get all existing replenishmentPlan tags.
     * @param replenishmentPlanId Id of the replenishmentPlan to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReplenishmentPlanTagsWithHttpInfo(Integer replenishmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentPlanTagsValidateBeforeCall(replenishmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a replenishmentPlan. (asynchronously)
     * Get all existing replenishmentPlan tags.
     * @param replenishmentPlanId Id of the replenishmentPlan to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentPlanTagsAsync(Integer replenishmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentPlanTagsValidateBeforeCall(replenishmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReplenishmentPlan
     * @param body ReplenishmentPlan to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentPlanCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReplenishmentPlanValidateBeforeCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReplenishmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReplenishmentPlanCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a replenishmentPlan
     * Updates an existing replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReplenishmentPlan(ReplenishmentPlan body) throws ApiException {
        updateReplenishmentPlanWithHttpInfo(body);
    }

    /**
     * Update a replenishmentPlan
     * Updates an existing replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReplenishmentPlanWithHttpInfo(ReplenishmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = updateReplenishmentPlanValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a replenishmentPlan (asynchronously)
     * Updates an existing replenishmentPlan using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentPlanAsync(ReplenishmentPlan body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReplenishmentPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReplenishmentPlanCustomFields
     * @param body ReplenishmentPlan to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentPlanCustomFieldsCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishmentPlan/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReplenishmentPlanCustomFieldsValidateBeforeCall(ReplenishmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReplenishmentPlanCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReplenishmentPlanCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a replenishmentPlan custom fields
     * Updates an existing replenishmentPlan custom fields using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReplenishmentPlanCustomFields(ReplenishmentPlan body) throws ApiException {
        updateReplenishmentPlanCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a replenishmentPlan custom fields
     * Updates an existing replenishmentPlan custom fields using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReplenishmentPlanCustomFieldsWithHttpInfo(ReplenishmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = updateReplenishmentPlanCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a replenishmentPlan custom fields (asynchronously)
     * Updates an existing replenishmentPlan custom fields using the specified data.
     * @param body ReplenishmentPlan to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentPlanCustomFieldsAsync(ReplenishmentPlan body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReplenishmentPlanCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
